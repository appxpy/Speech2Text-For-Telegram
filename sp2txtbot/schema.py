from typing import Optional, Union


schema = {
    'start': 'üëã *–ü—Ä–∏–≤–µ—Ç!*\n–Ø –±–æ—Ç –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏ –≤ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –∏ –∫—Ä—É–∂–æ—á–∫–∞—Ö)\n\n*ü§î –ö–∞–∫ —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è?*\n–î–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∞—É–¥–∏–æ –≤ —Ç–µ–∫—Å—Ç, —Ç–µ–±–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–µ—Ä–µ—Å–ª–∞—Ç—å –º–Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∫—Ä—É–∂–æ—á–µ–∫, —è —Ç—É—Ç –∂–µ –≤–æ–∑—å–º—É—Å—å –∑–∞ —Ä–∞–±–æ—Ç—É). –û–±—ã—á–Ω–æ, —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –Ω–µ –∑–∞–Ω–∏–º–∞–µ—Ç –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏, –ø—Ä–∏–º–µ—Ä–Ω–æ 10-30 —Å–µ–∫—É–Ω–¥.\n\n*–ë–æ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –≤ —Ä–∞–º–∫–∞—Ö –ø—Ä–æ–µ–∫—Ç–∞ –ù–ò–£ –í–®–≠ –∏ –∏–º–µ–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã–π –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥.* [—Ç—ã–∫ –Ω–∞ –º–µ–Ω—è](https://github.com/appxpy/Speech2Text-For-Telegram)\n\n made with ‚ù§Ô∏è by @appxpy & @brazenoptimist',
    'processing': 'üîÅ *–û–±—Ä–∞–±–æ—Ç–∫–∞...*',
    'error': '‚ùå *–û—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ, –∞ –ª—É—á—à–µ –Ω–∞–ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω–∞–º!!!*',
    'success': '‚úÖ *–ì–æ—Ç–æ–≤–æ!*\n\n{message}',
}


def escape(text: str) -> str:
    return text.replace('_', '\\_').replace('*', '\\*').replace("[", "\\[").replace("`", "\\`")


class SafeFormat(dict):
    def __missing__(self, key):
        return key.join("")


def msg(key: Optional[str], **kwargs) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —Å—Ö–µ–º—ã –ø–æ –∫–ª—é—á—É"""

    for k, v in kwargs.items():
        if isinstance(v, str):
            if not k.startswith('no_escape_') and k != 'no_escape_':
                kwargs[k.replace('no_escape_', '')] = escape(v)
    if not key:
        return ''
    if key in schema:
        return schema[key].format_map(SafeFormat(**kwargs))
    else:
        return "‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ö–ª—é—á: {key}".format_map(SafeFormat(key=key))
